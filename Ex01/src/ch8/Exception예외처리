Exception 예외처리

1.1 프로그램 오류

	1. Compile Error 컴파일에러
		- 컴파일러가 발생시키는 에러 : 오타, 잘못된 구문, 자료형 체크 등의 기본적인 검사
		- 컴파일러가 에러발생 없이 정상작동해야 (*.class)파일이 생성된다.
	
	2. Runtime Error 런타임에러
		- 실행 시 발생하게 되는 에러
	
	3. logical Error 논리적에러
		- 컴파일, 실행시는 문제가 없으나 목적과 다르게 동작하는 것
		- ex) 	창고의 재고가 음수가 된다.
				게임에서 죽어야되는데 죽지 않음
	
	4. Error 에러 : 심각한에러
	5. Exception : 수습될 수 있는 미약한 오류

1.2 예외 클래스의 계층도
	
	1. Exception 클래스들 : 사용자의 실수, 외적인 요인에 의해 발생되는 오류
	2. RuntimeException 클래스들 : 프로그래밍 실수로 인한 오류
	
1.3 예외처리 try-catch : "Exception3.java" 파일 참고
	- try-catch문 실행시 "Exception e" 처리의 경우 가장 마지막으로 와야한다.
	- Exception : 모든 예외처리의 최고 조상
	
1.4 Exception의 두 가지
	1. throw new Exception(); 
		Exception과 그 자손들은 반드시 예외처리를 해줘야 한다. (필수)
		
	2. throw new RuntimeException();
		RuntimeException과 그 자손들은 예외처리를 하지 않아도 된다. (선택)
	
[RumtimeException : 프로그래밍 실수]============================================================================
	ArrayIndexOutOfBoundsException : 배열의 범위를 벗어났을 때
	NullPointerException : 값이 null인 참조변수의 멤버를 호출했을 시
	ClassCastException : 클래스 형변환오류
	ArithmeticException : 정수를 0으로 나눴을 경우
	
[Exception : 사용자의 실수]=====================================================================================
	FileNotFoundException : 존재하지 않는 파일의 이름을 입력
	ClassNotFoundException : 실수로 클래스의 이름을 오입력
	DataFormatException : 입력한 데이터 형식의 오류